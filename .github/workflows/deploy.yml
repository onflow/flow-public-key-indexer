name: "Deploy to Cloud Run"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_URL: ${{ vars.GCP_DOCKER_IMAGE_URL }}:${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    container: ubuntu
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: keyindexer
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Install CA certificates
        run: |
          apt-get update
          apt-get install -y ca-certificates
          update-ca-certificates
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
      - name: Install dependencies
        run: go mod tidy
      - name: Install GCC
        run: |
          apt-get update
          apt-get install -y gcc
      - name: Run tests
        env:
          KEYIDX_POSTGRESQLHOST: postgres
          KEYIDX_POSTGRESQLPORT: 5432
          KEYIDX_POSTGRESQLUSERNAME: postgres
          KEYIDX_POSTGRESQLPASSWORD: password
          KEYIDX_POSTGRESQLDATABASE: keyindexer
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
          CC: gcc
          CGO_CFLAGS: "-O2 -D__BLST_PORTABLE__"
        run: go test ./... -v

  build:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ vars.BUILDER_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.BUILDER_SERVICE_ACCOUNT }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GAR_PROJECT_ID }}
      
      - name: Install GCC
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc
      - name: Build Docker image
        env:
          CGO_ENABLED: 1
          CGO_CFLAGS: "-O2 -D__BLST_PORTABLE__"
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_URL }} \
            --build-arg CGO_ENABLED=1 \
            --build-arg CGO_CFLAGS="-O2 -D__BLST_PORTABLE__" \
            --build-arg CC=gcc \
            --build-arg GOARCH=amd64 \
            --file Dockerfile .

  deploy-staging:
    needs: [build]
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ vars.DEPLOYER_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.DEPLOYER_SERVICE_ACCOUNT }}
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ vars.GCP_SERVICE }}
          image: ${{ env.DOCKER_IMAGE_URL }}

  deploy-production:
    needs: [build]
    environment: production
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ vars.DEPLOYER_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.DEPLOYER_SERVICE_ACCOUNT }}
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ vars.GCP_SERVICE }}
          image: ${{ env.DOCKER_IMAGE_URL }}
